// Heap.java
// Skeleton code

class HeapRecursive {
    private int[] a;
    int N;
    static int maxH = 100;

    // two constructors
    HeapRecursive() {
        N = 0;
        a = new int[maxH + 1];
    }

    HeapRecursive(int size) {
        N = 0;
        a = new int[size + 1];
    }

    void siftUp(int k) {
        int v = a[k];
        a[0] = Integer.MAX_VALUE;

        // complete yourself from pseudocode in notes

        // if v is > than the parent
        while (v > a[k / 2]) {
            a[k] = a[k / 2]; // copy parent value to position k,
            k = k / 2; // update k to be parent index
        }
        a[k] = v; // assing v to new position k

    }

    void siftDown(int[] A, int i) {
        int l = 2 * i; // calculate index of left child
        int r = 2 * i + 1; // calculate index of right child
        int largest; // hold index of the largest element
        int heapSize = A.length - 1; // size of heap
        
        if (l <= heapSize && A[l] > A[i]) {
            largest = l;
        } else {
            largest = i;
        }
        
        if (r <= heapSize && A[r] > A[largest]) {
            largest = r;
        }
        
        if (largest != i) {
            int temp = A[i];
            A[i] = A[largest];
            A[largest] = temp;
            siftDown(A, largest);
        }
    }

    void buildMaxHeap() {
        int heapSize = a.length - 1;
        for (int i = heapSize / 2; i >= 1; i--) {
            siftDown(a, i);
        }
    }

    void insert(int x) {
        a[++N] = x;
        siftUp(N);
    }

    int remove() {
        a[0] = a[1]; // store highest priority value in a[0]
        a[1] = a[N--]; // and replace it with value from end og the heap
        siftDown(a,1); // and then sift this value down
        return a[0];
    }

    void display() {
        System.out.println("\nThe tree structure of the heaps is:");
        System.out.println(a[1]);
        for (int i = 1; i <= N / 2; i = i * 2) {
            for (int j = 2 * i; j < 4 * i && j <= N; ++j)
                System.out.print(a[j] + "  ");
            System.out.println();
        }
        System.out.println();
    }

    public static void main(String args[]) {

        HeapRecursive h = new HeapRecursive();
        int r;
        double x;

        // insert random numbers between 0 and 99 into heap
        for (int i = 1; i <= 10; ++i) {
            x = (Math.random() * 100.0);
            r = (int) x;
            System.out.println("Inserting " + r);
            h.insert(r);
            h.display();
        }

        h.buildMaxHeap(); // Build the heap
        h.display(); // Display the built heap
        
        int value = h.remove();
        System.out.println("removed value: " + value);
        h.display();
    }

} // end of Heap class
